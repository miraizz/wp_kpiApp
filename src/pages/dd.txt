KPIManagement.js:
import React, { useState, useEffect } from 'react';
import { dummyKPIs } from '../data/dummyKPIs';
import './KPIManagement.css';

const KPIManagement = () => {
  const [kpis, setKpis] = useState(dummyKPIs);
  const [filterDept, setFilterDept] = useState('all');
  const [formData, setFormData] = useState({
    title: '', description: '', staffId: '', staffName: '', department: '',
    managerName: '', managerId: '', startDate: '', endDate: '', category: '', priority: ''
  });
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editId, setEditId] = useState(null);
  const [detailsId, setDetailsId] = useState(null);

  const openForm = (edit = false, id = null) => {
    if (edit) {
      const kpi = kpis.find(k => k.id === id);
      setFormData({
        title: kpi.title, description: kpi.description, staffId: kpi.assignedTo.staffId,
        staffName: kpi.assignedTo.name, department: kpi.assignedTo.department,
        managerName: kpi.assignedBy.name, managerId: kpi.assignedBy.managerId,
        startDate: kpi.startDate, endDate: kpi.dueDate, category: kpi.category, priority: kpi.priority
      });
      setEditId(id);
      setIsEditMode(true);
    } else {
      setFormData({
        title: '', description: '', staffId: '', staffName: '', department: '',
        managerName: '', managerId: '', startDate: '', endDate: '', category: '', priority: ''
      });
      setIsEditMode(false);
      setEditId(null);
    }
    setIsPopupOpen(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (isEditMode) {
      setKpis(prev =>
        prev.map(kpi => kpi.id === editId
          ? {
              ...kpi,
              title: formData.title,
              description: formData.description,
              category: formData.category,
              priority: formData.priority,
              startDate: formData.startDate,
              dueDate: formData.endDate,
              assignedTo: {
                name: formData.staffName,
                staffId: formData.staffId,
                department: formData.department
              },
              assignedBy: {
                name: formData.managerName,
                managerId: formData.managerId
              }
            }
          : kpi
        )
      );
    } else {
      const newKPI = {
        id: `KPI-${Date.now()}`,
        title: formData.title,
        description: formData.description,
        category: formData.category,
        priority: formData.priority,
        startDate: formData.startDate,
        dueDate: formData.endDate,
        status: 'Pending',
        progress: '0',
        assignedTo: {
          name: formData.staffName,
          staffId: formData.staffId,
          department: formData.department
        },
        assignedBy: {
          name: formData.managerName,
          managerId: formData.managerId
        }
      };
      setKpis([...kpis, newKPI]);
    }
    setIsPopupOpen(false);
  };

  const handleDelete = (id) => {
    if (window.confirm('Delete this KPI?')) {
      setKpis(prev => prev.filter(kpi => kpi.id !== id));
    }
  };

  const renderBadge = (priority) => {
    let className = 'status-badge ';
    if (priority === 'High') className += 'high';
    else if (priority === 'Medium') className += 'medium';
    else className += 'low';
    return <span className={className}>{priority}</span>;
  };

  const filteredKPIs = kpis.filter(kpi => {
    return filterDept === 'all' || kpi.assignedTo.department === filterDept;
  });

  return (
    <div className="container">
      <h2 className="heading">KPI Management</h2>
      <p className="description">View, assign, update, and delete key performance indicators.</p>

      <div className="filter-bar">
        <button className="assign-btn" onClick={() => openForm(false)}>Assign KPI</button>
        <select value={filterDept} onChange={e => setFilterDept(e.target.value)}>
          <option value="all">All Departments</option>
          <option value="HR">HR</option>
          <option value="Finance">Finance</option>
          <option value="Marketing">Marketing</option>
          <option value="IT">IT</option>
        </select>
      </div>

      <table className="kpi-table">
        <thead>
          <tr>
            <th>KPI ID</th>
            <th>Title</th>
            <th>Staff</th>
            <th>Department</th>
            <th>Priority</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {filteredKPIs.map(kpi => (
            <tr key={kpi.id}>
              <td>{kpi.id}</td>
              <td>{kpi.title}</td>
              <td>{kpi.assignedTo.name}</td>
              <td>{kpi.assignedTo.department}</td>
              <td>{renderBadge(kpi.priority)}</td>
              <td className="action-buttons">
                <button className="action-details" onClick={() => setDetailsId(kpi.id)}>Details</button>
                <button className="action-edit" onClick={() => openForm(true, kpi.id)}>Edit</button>
                <button className="action-delete" onClick={() => handleDelete(kpi.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Modal for Assign/Edit */}
      {isPopupOpen && (
        <div className="modal-overlay">
          <div className="modal-box">
            <h3>{isEditMode ? 'Edit KPI' : 'Assign New KPI'}</h3>
            <form onSubmit={handleSubmit} className="kpi-form">
              <label>Title</label>
              <input type="text" name="title" value={formData.title} onChange={handleChange} />

              <label>Description</label>
              <input type="text" name="description" value={formData.description} onChange={handleChange} />
            
              <label>Staff ID</label>
              <input type="text" name="staffId" value={formData.staffId} onChange={handleChange} />
            
              <label>Staff Name</label>
              <input type="text" name="staffName" value={formData.staffName} onChange={handleChange} />
            
              <label>Department</label>
              <input type="text" name="department" value={formData.department} onChange={handleChange} />
            
              <label>Manager Name</label>
              <input type="text" name="managerName" value={formData.managerName} onChange={handleChange} />
            
              <label>Manager ID</label>
              <input type="text" name="managerId" value={formData.managerId} onChange={handleChange} />
            
              <label>Start Date</label>
              <input type="date" name="startDate" value={formData.startDate} onChange={handleChange} />
            
              <label>End Date</label>
              <input type="date" name="endDate" value={formData.endDate} onChange={handleChange} />
            
              <label>Category</label>
              <input type="text" name="category" value={formData.category} onChange={handleChange} />
            
              <label>Priority</label>
              <select name="priority" value={formData.priority} onChange={handleChange}>
                <option value="">Select Priority</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
              </select>
            
              <button type="submit" className="form-button green">{isEditMode ? 'Update KPI' : 'Assign KPI'}</button>
              <button type="button" className="form-button red" onClick={() => setIsPopupOpen(false)}>Cancel</button>
            </form>
          </div>
        </div>
      )}

      {/* Modal for Details */}
      {detailsId && (
        <div className="modal-overlay">
          <div className="modal-box">
            <h3>KPI Details</h3>
            {(() => {
              const kpi = kpis.find(k => k.id === detailsId);
              return kpi ? (
                <div>
                  <p><strong>Title:</strong> {kpi.title}</p>
                  <p><strong>Description:</strong> {kpi.description}</p>
                  <p><strong>Staff:</strong> {kpi.assignedTo.name}</p>
                  <p><strong>Staff ID:</strong> {kpi.assignedTo.staffId}</p>
                  <p><strong>Department:</strong> {kpi.assignedTo.department}</p>
                  <p><strong>Manager:</strong> {kpi.assignedBy.name}</p>
                  <p><strong>Manager ID:</strong> {kpi.assignedBy.managerId}</p>
                  <p><strong>Start Date:</strong> {kpi.startDate}</p>
                  <p><strong>Due Date:</strong> {kpi.dueDate}</p>
                  <p><strong>Category:</strong> {kpi.category}</p>
                  <p><strong>Priority:</strong> {kpi.priority}</p>
                </div>
              ) : null;
            })()}
            <button className="red-btn" onClick={() => setDetailsId(null)}>Close</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default KPIManagement;


KPIManagement.css:
.container {
  padding: 20px;
}

.heading {
  font-size: 32px;
  color: #0b5c66;
  font-weight: bold;
  margin-bottom: 0;
  text-align: left;
}

.description {
  font-size: 1rem;
  color: #555;
  text-align: left;
  margin-bottom: 20px;
}

.filter-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.assign-btn {
  background-color: #0b5c66;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.kpi-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 14px;
  border: 1px solid #0F5D6C;
}

.kpi-table th, .kpi-table td {
  padding: 12px;
  border: 1px solid #c1e4eb;
  text-align: left;
}

.kpi-table th {
  background-color: #A1D6E2;
  color: #1e293b;
}

.status-badge {
  padding: 4px 10px;
  border-radius: 12px;
  font-weight: bold;
  font-size: 12px;
}

.status-badge.high {
  background-color: #fee2e2;
  color: #b91c1c;
}

.status-badge.medium {
  background-color: #fef9c3;
  color: #92400e;
}

.status-badge.low {
  background-color: #dcfce7;
  color: #15803d;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: rgba(0,0,0,0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
}

.modal-box {
  background-color: white;
  padding: 30px;
  border-radius: 12px;
  max-width: 500px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
}

.modal-box h3 {
  margin-bottom: 20px;
  color: #0b5c66;
}

.modal-box input, .modal-box select {
  width: 100%;
  padding: 10px;
  margin-bottom: 12px;
  border: 1px solid #ccc;
  border-radius: 6px;
}

.green-btn {
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  width: 100%;
  border: none;
  border-radius: 6px;
  margin-top: 10px;
  cursor: pointer;
}

.red-btn {
  background-color: #f44336;
  color: white;
  padding: 10px;
  width: 100%;
  border: none;
  border-radius: 6px;
  margin-top: 10px;
  cursor: pointer;
}

.action-buttons button {
  padding: 6px 12px;
  margin: 2px;
  border: none;
  border-radius: 6px;
  color: white;
  font-weight: 600;
  font-size: 13px;
  cursor: pointer;
  transition: 0.2s;
}

.action-details {
  background-color: #0F5D6C;
}

.action-details:hover {
  background-color: #0c4e5b;
}

.action-edit {
  background-color: #4F7942;
}

.action-edit:hover {
  background-color: #3d6133;
}

.action-delete {
  background-color: #FF2400;
}

.action-delete:hover {
  background-color: #cc1d00;
}

.kpi-form label {
  font-weight: 600;
  margin-top: 12px;
  margin-bottom: 4px;
  display: block;
  color: #333;
}

.kpi-form input,
.kpi-form select {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border-radius: 6px;
  border: 1px solid #ccc;
  margin-bottom: 10px;
  box-sizing: border-box;
}

.form-button.green {
  background-color: #4CAF50;
  color: white;
  border: none;
  padding: 10px;
  margin-top: 10px;
  width: 100%;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
}

.form-button.red {
  background-color: #FF2400;
  color: white;
  border: none;
  padding: 10px;
  margin-top: 10px;
  width: 100%;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
}

dummyKPIs.js:
// Dummy data for KPIs (Key Performance Indicators) for 2025  
export const dummyKPIs = [
    {
      id: "KPI-2025-001",
      title: "Increase Website Traffic",
      description: "Grow traffic by 20% in Q3 through targeted ad campaigns.",
      category: "Performance",
      priority: "High",
      progress: 80,
      status: "On Track",
      submitted: false,
      verifyStatus: "Pending",
      startDate: "2025-07-01",
      dueDate: "2025-09-30",
      assignedTo: { name: "Afiq", staffId: "EMP-201", department: "Marketing" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" },
      evidence: "/files/revenue-report.pdf"
    },
    {
      id: "KPI-2025-002",
      title: "Social Media Engagement",
      description: "Boost Instagram engagement by 15% through reels.",
      category: "Performance",
      priority: "Medium",
      progress: 20,
      status: "Behind",
      submitted: false,
      verifyStatus: "Pending",
      startDate: "2025-07-01",
      dueDate: "2025-09-15",
      assignedTo: { name: "Afiq", staffId: "EMP-201", department: "Marketing" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" },
      evidence: "/files/doc-policy.pdf"
    },
    {
      id: "KPI-2025-003",
      title: "Develop Landing Page",
      description: "Design and launch product landing page for campaign.",
      category: "Documentation",
      priority: "Low",
      progress: 80,
      status: "On Track",
      submitted: false,
      verifyStatus: "Pending",
      startDate: "2025-07-10",
      dueDate: "2025-08-31",
      assignedTo: { name: "Afiq", staffId: "EMP-201", department: "Marketing" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" }
    },
    {
      id: "KPI-2025-004",
      title: "Complete Financial Audit",
      description: "Ensure Q2 financial audit is completed and submitted.",
      category: "Compliance",
      priority: "Medium",
      progress: 40,
      status: "At Risk",
      submitted: false,
      verifyStatus: "Pending",
      startDate: "2025-07-05",
      dueDate: "2025-08-15",
      assignedTo: { name: "Alif", staffId: "EMP-202", department: "Finance" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" },
      evidence: "/files/revenue-report.pdf"
    },
    {
      id: "KPI-2025-005",
      title: "Create Forecasting Model",
      description: "Develop predictive model for Q4 budgeting.",
      category: "Performance",
      priority: "High",
      progress: 100,
      status: "Completed",
      submitted: true,
      verifyStatus: "Accepted",
      startDate: "2025-07-10",
      dueDate: "2025-09-25",
      assignedTo: { name: "Alif", staffId: "EMP-202", department: "Finance" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" },
      evidence: "/files/report.pdf"
    },
    {
      id: "KPI-2025-006",
      title: "Revise Company Policy",
      description: "Update internal policy documents and publish to portal.",
      category: "Documentation",
      priority: "Low",
      progress: 80,
      status: "On Track",
      submitted: false,
      verifyStatus: "Pending",
      startDate: "2025-07-01",
      dueDate: "2025-08-20",
      assignedTo: { name: "Amira", staffId: "EMP-203", department: "HR" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" }
    },
    {
      id: "KPI-2025-007",
      title: "Improve Ticket Response Time",
      description: "Reduce average support response to under 1 hour.",
      category: "Performance",
      priority: "High",
      progress: 20,
      status: "Behind",
      submitted: false,
      verifyStatus: "Pending",
      startDate: "2025-07-10",
      dueDate: "2025-09-25",
      assignedTo: { name: "Marsya", staffId: "EMP-204", department: "IT" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" }
    },
    {
      id: "KPI-2025-008",
      title: "Deploy Helpdesk System",
      description: "Implement and onboard staff to new helpdesk tool.",
      category: "Compliance",
      priority: "Medium",
      progress: 40,
      status: "At Risk",
      submitted: false,
      verifyStatus: "Pending",
      startDate: "2025-07-15",
      dueDate: "2025-08-30",
      assignedTo: { name: "Marsya", staffId: "EMP-204", department: "IT" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" }
    },
    {
      id: "KPI-2025-009",
      title: "Standardize Financial Templates",
      description: "Create unified templates for all quarterly reports.",
      category: "Documentation",
      priority: "Medium",
      progress: 100,
      status: "Completed",
      submitted: true,
      verifyStatus: "Pending",
      startDate: "2025-07-12",
      dueDate: "2025-09-15",
      assignedTo: { name: "Zikri", staffId: "EMP-205", department: "Finance" },
      assignedBy: { name: "Priya Patel", managerId: "MGR-110" }
    }
  ];


  export const getStaffKpiCount = (kpis) => {
    const map = {};
    kpis.forEach(kpi => {
      const id = kpi.assignedTo.staffId;
      if (!map[id]) {
        map[id] = {
          name: kpi.assignedTo.name,
          department: kpi.assignedTo.department,
          staffId: id,
          kpiCount: 0
        };
      }
      map[id].kpiCount += 1;
    });
    return Object.values(map);
  };

  can you modify the codes using the new dummyKPIs.js file so that it shows full details when click the details button and use the dummyKPI for the table